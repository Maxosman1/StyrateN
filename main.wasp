app Styrate {
  wasp: {
    version: "^0.11.1"
  },
  title: "Styrate",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id             Int          @id @default(autoincrement())
    username       String       @unique
    password       String
    profilePicture String
    handle         String       @unique
    points         Int          @default(0)
    submissions    Submission[]
psl=}

entity Category {=psl
    id       Int       @id @default(autoincrement())
    name     String    @unique
    emoji    String
    contests Contest[]
psl=}

entity Contest {=psl
    id          Int          @id @default(autoincrement())
    name        String
    description String
    categoryId  Int
    category    Category     @relation(fields: [categoryId], references: [id])
    submissions Submission[]
psl=}

entity Submission {=psl
    id          Int     @id @default(autoincrement())
    videoUrl    String
    title       String
    description String
    points      Int     @default(0)
    contestId   Int
    contest     Contest @relation(fields: [contestId], references: [id])
    userId      Int
    user        User    @relation(fields: [userId], references: [id])
psl=}

action createSubmission {
  fn: import { createSubmission } from "@server/actions.js",
  entities: [Submission, Contest, User]
}

action updateProfile {
  fn: import { updateProfile } from "@server/actions.js",
  entities: [User]
}

query getContests {
  fn: import { getContests } from "@server/queries.js",
  entities: [Contest, Category]
}

query getSubmissions {
  fn: import { getSubmissions } from "@server/queries.js",
  entities: [Submission, Contest, User]
}

query getUserProfile {
  fn: import { getUserProfile } from "@server/queries.js",
  entities: [User]
}

route HomeRoute { path: "/", to: HomePage }
page HomePage {
  component: import { Home } from "@client/pages/Home.jsx",
  authRequired: true
}

route ContestRoute { path: "/contest/:contestId", to: ContestPage }
page ContestPage {
  component: import { ContestPage } from "@client/pages/Contest.jsx",
  authRequired: true
}

route SubmissionRoute { path: "/submission/:submissionId", to: SubmissionPage }
page SubmissionPage {
  component: import { Submission } from "@client/pages/Submission.jsx",
  authRequired: true
}

route ProfileRoute { path: "/profile/:userId", to: ProfilePage }
page ProfilePage {
  component: import { Profile } from "@client/pages/Profile.jsx",
  authRequired: true
}

route SettingsRoute { path: "/settings", to: SettingsPage }
page SettingsPage {
  component: import { Settings } from "@client/pages/Settings.jsx",
  authRequired: true
}